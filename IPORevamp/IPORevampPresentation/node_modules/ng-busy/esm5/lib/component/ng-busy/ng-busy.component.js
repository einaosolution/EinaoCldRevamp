/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Inject } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { InstanceConfigHolderService } from '../../service/instance-config-holder.service';
/** @type {?} */
var inactiveStyle = style({
    opacity: 0,
    transform: 'translateY(-40px)'
});
/** @type {?} */
var timing = '.3s ease';
var NgBusyComponent = /** @class */ (function () {
    function NgBusyComponent(instanceConfigHolder, busyEmitter, cdr) {
        var _this = this;
        this.instanceConfigHolder = instanceConfigHolder;
        this.busyEmitter = busyEmitter;
        this.cdr = cdr;
        this.disableAnimation = false;
        this.showBackdrop = true;
        this.isActive = false;
        this.busyMonitor = this.busyEmitter.subscribe(function (isActive) {
            /** @type {?} */
            var config = _this.instanceConfigHolder.config;
            _this.isActive = isActive;
            _this.wrapperClass = config.wrapperClass;
            _this.showBackdrop = config.backdrop;
            _this.disableAnimation = config.disableAnimation;
            if (_this.cdr) {
                _this.cdr.markForCheck();
            }
        });
    }
    /**
     * @return {?}
     */
    NgBusyComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.busyMonitor) {
            this.busyMonitor.unsubscribe();
        }
    };
    NgBusyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ng-busy',
                    template: "<div [class]=\"wrapperClass\" @flyInOut [@.disabled]=\"disableAnimation\" *ngIf=\"isActive\">\n  <ng-content></ng-content>\n</div>\n<div class=\"ng-busy-backdrop\" @flyInOut [@.disabled]=\"disableAnimation\" *ngIf=\"showBackdrop && isActive\">\n</div>\n",
                    styles: [""],
                    animations: [
                        trigger('flyInOut', [
                            transition('void => *', [
                                inactiveStyle,
                                animate(timing)
                            ]),
                            transition('* => void', [
                                animate(timing, inactiveStyle)
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    NgBusyComponent.ctorParameters = function () { return [
        { type: InstanceConfigHolderService, decorators: [{ type: Inject, args: ['instanceConfigHolder',] }] },
        { type: EventEmitter, decorators: [{ type: Inject, args: ['busyEmitter',] }] },
        { type: ChangeDetectorRef }
    ]; };
    return NgBusyComponent;
}());
export { NgBusyComponent };
if (false) {
    /** @type {?} */
    NgBusyComponent.prototype.wrapperClass;
    /** @type {?} */
    NgBusyComponent.prototype.disableAnimation;
    /** @type {?} */
    NgBusyComponent.prototype.showBackdrop;
    /** @type {?} */
    NgBusyComponent.prototype.busyMonitor;
    /** @type {?} */
    NgBusyComponent.prototype.isActive;
    /** @type {?} */
    NgBusyComponent.prototype.instanceConfigHolder;
    /** @type {?} */
    NgBusyComponent.prototype.busyEmitter;
    /** @type {?} */
    NgBusyComponent.prototype.cdr;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYnVzeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1idXN5LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC9uZy1idXN5L25nLWJ1c3kuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBR3hFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLDhDQUE4QyxDQUFDOztBQUV6RixJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDMUIsT0FBTyxFQUFFLENBQUM7SUFDVixTQUFTLEVBQUUsbUJBQW1CO0NBQy9CLENBQUMsQ0FBQzs7QUFDSCxJQUFNLE1BQU0sR0FBRyxVQUFVLENBQUM7O0lBK0J4Qix5QkFDMEMsb0JBQWlELEVBQzFELFdBQWtDLEVBQ2hEO1FBSG5CLGlCQWVDO1FBZHlDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBNkI7UUFDMUQsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO1FBQ2hELFFBQUcsR0FBSCxHQUFHO2dDQVJJLEtBQUs7NEJBQ1QsSUFBSTtRQUUxQixnQkFBVyxLQUFLLENBQUM7UUFPZixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQUMsUUFBaUI7O1lBQzlELElBQU0sTUFBTSxHQUFHLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7WUFDaEQsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDekIsS0FBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO1lBQ3hDLEtBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNwQyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQ2hELElBQUksS0FBSSxDQUFDLEdBQUcsRUFBRTtnQkFDWixLQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3pCO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFFRCxxQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNoQztLQUNGOztnQkFsREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixRQUFRLEVBQUUsK1BBS1g7b0JBQ0MsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO29CQUNaLFVBQVUsRUFBRTt3QkFDVixPQUFPLENBQUMsVUFBVSxFQUFFOzRCQUNsQixVQUFVLENBQUMsV0FBVyxFQUFFO2dDQUN0QixhQUFhO2dDQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUM7NkJBQ2hCLENBQUM7NEJBQ0YsVUFBVSxDQUFDLFdBQVcsRUFBRTtnQ0FDdEIsT0FBTyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUM7NkJBQy9CLENBQUM7eUJBQ0gsQ0FBQztxQkFDSDtpQkFDRjs7OztnQkE1Qk8sMkJBQTJCLHVCQXNDOUIsTUFBTSxTQUFDLHNCQUFzQjtnQkExQ0ksWUFBWSx1QkEyQzdDLE1BQU0sU0FBQyxhQUFhO2dCQTNDakIsaUJBQWlCOzswQkFBekI7O1NBaUNhLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5qZWN0LCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHthbmltYXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlcn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcy9pbnRlcm5hbC9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHtOZ0J1c3lEaXJlY3RpdmV9IGZyb20gJy4uLy4uL25nLWJ1c3kuZGlyZWN0aXZlJztcbmltcG9ydCB7SW5zdGFuY2VDb25maWdIb2xkZXJTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlL2luc3RhbmNlLWNvbmZpZy1ob2xkZXIuc2VydmljZSc7XG5cbmNvbnN0IGluYWN0aXZlU3R5bGUgPSBzdHlsZSh7XG4gIG9wYWNpdHk6IDAsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTQwcHgpJ1xufSk7XG5jb25zdCB0aW1pbmcgPSAnLjNzIGVhc2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItbmctYnVzeScsXG4gIHRlbXBsYXRlOiBgPGRpdiBbY2xhc3NdPVwid3JhcHBlckNsYXNzXCIgQGZseUluT3V0IFtALmRpc2FibGVkXT1cImRpc2FibGVBbmltYXRpb25cIiAqbmdJZj1cImlzQWN0aXZlXCI+XG4gIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbjwvZGl2PlxuPGRpdiBjbGFzcz1cIm5nLWJ1c3ktYmFja2Ryb3BcIiBAZmx5SW5PdXQgW0AuZGlzYWJsZWRdPVwiZGlzYWJsZUFuaW1hdGlvblwiICpuZ0lmPVwic2hvd0JhY2tkcm9wICYmIGlzQWN0aXZlXCI+XG48L2Rpdj5cbmAsXG4gIHN0eWxlczogW2BgXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ2ZseUluT3V0JywgW1xuICAgICAgdHJhbnNpdGlvbigndm9pZCA9PiAqJywgW1xuICAgICAgICBpbmFjdGl2ZVN0eWxlLFxuICAgICAgICBhbmltYXRlKHRpbWluZylcbiAgICAgIF0pLFxuICAgICAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgW1xuICAgICAgICBhbmltYXRlKHRpbWluZywgaW5hY3RpdmVTdHlsZSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0J1c3lDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHB1YmxpYyB3cmFwcGVyQ2xhc3M6IHN0cmluZztcbiAgcHVibGljIGRpc2FibGVBbmltYXRpb24gPSBmYWxzZTtcbiAgcHVibGljIHNob3dCYWNrZHJvcCA9IHRydWU7XG4gIHByaXZhdGUgcmVhZG9ubHkgYnVzeU1vbml0b3I6IFN1YnNjcmlwdGlvbjtcbiAgaXNBY3RpdmUgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KCdpbnN0YW5jZUNvbmZpZ0hvbGRlcicpIHByaXZhdGUgaW5zdGFuY2VDb25maWdIb2xkZXI6IEluc3RhbmNlQ29uZmlnSG9sZGVyU2VydmljZSxcbiAgICBASW5qZWN0KCdidXN5RW1pdHRlcicpIHByaXZhdGUgYnVzeUVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxib29sZWFuPixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgdGhpcy5idXN5TW9uaXRvciA9IHRoaXMuYnVzeUVtaXR0ZXIuc3Vic2NyaWJlKChpc0FjdGl2ZTogYm9vbGVhbikgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5pbnN0YW5jZUNvbmZpZ0hvbGRlci5jb25maWc7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gaXNBY3RpdmU7XG4gICAgICB0aGlzLndyYXBwZXJDbGFzcyA9IGNvbmZpZy53cmFwcGVyQ2xhc3M7XG4gICAgICB0aGlzLnNob3dCYWNrZHJvcCA9IGNvbmZpZy5iYWNrZHJvcDtcbiAgICAgIHRoaXMuZGlzYWJsZUFuaW1hdGlvbiA9IGNvbmZpZy5kaXNhYmxlQW5pbWF0aW9uO1xuICAgICAgaWYgKHRoaXMuY2RyKSB7XG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYnVzeU1vbml0b3IpIHtcbiAgICAgIHRoaXMuYnVzeU1vbml0b3IudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxufVxuIl19