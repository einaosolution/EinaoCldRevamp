/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { from, timer } from 'rxjs';
import { isPromise } from '../util/isPromise';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function TrackerOptions() { }
/** @type {?} */
TrackerOptions.prototype.minDuration;
/** @type {?} */
TrackerOptions.prototype.delay;
/** @type {?} */
TrackerOptions.prototype.busyList;
var BusyTrackerService = /** @class */ (function () {
    function BusyTrackerService() {
        this.isDelayProcessing = false;
        this.isDurationProcessing = false;
        this.isBusiesProcessing = false;
        this.busyQueue = [];
        this.__isActive = false;
        this.onStartBusy = new EventEmitter();
        this.onStopBusy = new EventEmitter();
    }
    Object.defineProperty(BusyTrackerService.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.__isActive;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (this.__isActive === false && val === true && this.onStartBusy) {
                this.onStartBusy.emit();
            }
            if (this.__isActive === true && val === false && this.onStopBusy) {
                this.isBusiesProcessing = false;
                this.onStopBusy.emit();
            }
            this.__isActive = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BusyTrackerService.prototype, "busyList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.busyQueue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} options
     * @return {?}
     */
    BusyTrackerService.prototype.load = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.loadBusyQueue(options.busyList);
        this.startLoading(options);
    };
    /**
     * @return {?}
     */
    BusyTrackerService.prototype.updateActiveStatus = /**
     * @return {?}
     */
    function () {
        this.isActive = this.isBusiesProcessing &&
            !this.isDelayProcessing &&
            (this.isDurationProcessing || this.busyQueue.length > 0);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    BusyTrackerService.prototype.startLoading = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (!this.isBusiesProcessing && this.busyList.length > 0) {
            this.isBusiesProcessing = true;
            this.isDelayProcessing = true;
            this.updateActiveStatus();
            timer(options.delay).subscribe(function () {
                _this.isDelayProcessing = false;
                _this.isDurationProcessing = true;
                _this.updateActiveStatus();
                timer(options.minDuration).subscribe(function () {
                    _this.isDurationProcessing = false;
                    _this.updateActiveStatus();
                });
            });
        }
    };
    /**
     * @param {?} busies
     * @return {?}
     */
    BusyTrackerService.prototype.loadBusyQueue = /**
     * @param {?} busies
     * @return {?}
     */
    function (busies) {
        var _this = this;
        busies.filter(function (busy) {
            return busy && !busy.hasOwnProperty('__loaded_mark_by_ng_busy');
        }).forEach(function (busy) {
            Object.defineProperty(busy, '__loaded_mark_by_ng_busy', {
                value: true, configurable: false, enumerable: false, writable: false
            });
            /** @type {?} */
            var cur_busy;
            if (isPromise(busy)) {
                cur_busy = from(busy).subscribe();
            }
            else {
                cur_busy = busy;
            }
            _this.appendToQueue(cur_busy);
        });
    };
    /**
     * @param {?} busy
     * @return {?}
     */
    BusyTrackerService.prototype.appendToQueue = /**
     * @param {?} busy
     * @return {?}
     */
    function (busy) {
        var _this = this;
        this.busyQueue.push(busy);
        busy.add(function () {
            _this.busyQueue = _this.busyQueue.filter(function (cur) { return !cur.closed; });
            _this.updateActiveStatus();
        });
    };
    /**
     * @return {?}
     */
    BusyTrackerService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    BusyTrackerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    BusyTrackerService.ctorParameters = function () { return []; };
    /** @nocollapse */ BusyTrackerService.ngInjectableDef = i0.defineInjectable({ factory: function BusyTrackerService_Factory() { return new BusyTrackerService(); }, token: BusyTrackerService, providedIn: "root" });
    return BusyTrackerService;
}());
export { BusyTrackerService };
if (false) {
    /** @type {?} */
    BusyTrackerService.prototype.isDelayProcessing;
    /** @type {?} */
    BusyTrackerService.prototype.isDurationProcessing;
    /** @type {?} */
    BusyTrackerService.prototype.isBusiesProcessing;
    /** @type {?} */
    BusyTrackerService.prototype.busyQueue;
    /** @type {?} */
    BusyTrackerService.prototype.__isActive;
    /** @type {?} */
    BusyTrackerService.prototype.onStartBusy;
    /** @type {?} */
    BusyTrackerService.prototype.onStopBusy;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVzeS10cmFja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1idXN5LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvYnVzeS10cmFja2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBZSxJQUFJLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7Ozs7OztJQXdDMUM7aUNBM0I0QixLQUFLO29DQUNGLEtBQUs7a0NBQ1AsS0FBSzt5QkFDTyxFQUFFOzBCQUN0QixLQUFLO1FBRTFCLG1CQUFpQyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3BELGtCQUFnQyxJQUFJLFlBQVksRUFBRSxDQUFDO0tBb0JuQztJQWxCaEIsc0JBQUksd0NBQVE7Ozs7UUFBWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUN4Qjs7Ozs7UUFFRCxVQUFhLEdBQVk7WUFDdkIsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLEtBQUssSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2pFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDekI7WUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDaEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUN4QjtZQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1NBQ3ZCOzs7T0FYQTtJQVlELHNCQUFJLHdDQUFROzs7O1FBQVo7WUFD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cG9ydCB7RXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlLCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdWJzY3JpcHRpb24sIGZyb20sIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7aXNQcm9taXNlfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhY2tlck9wdGlvbnMge1xuICBtaW5EdXJhdGlvbjogbnVtYmVyO1xuICBkZWxheTogbnVtYmVyO1xuICBidXN5TGlzdDogQXJyYXk8UHJvbWlzZTxhbnk+IHwgU3Vic2NyaXB0aW9uPjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQnVzeVRyYWNrZXJTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBwcml2YXRlIGlzRGVsYXlQcm9jZXNzaW5nID0gZmFsc2U7XG4gIHByaXZhdGUgaXNEdXJhdGlvblByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpc0J1c2llc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBidXN5UXVldWU6IEFycmF5PFN1YnNjcmlwdGlvbj4gPSBbXTtcbiAgcHJpdmF0ZSBfX2lzQWN0aXZlID0gZmFsc2U7XG5cbiAgb25TdGFydEJ1c3k6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBvblN0b3BCdXN5OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBnZXQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX19pc0FjdGl2ZTtcbiAgfVxuXG4gIHNldCBpc0FjdGl2ZSh2YWw6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5fX2lzQWN0aXZlID09PSBmYWxzZSAmJiB2YWwgPT09IHRydWUgJiYgdGhpcy5vblN0YXJ0QnVzeSkge1xuICAgICAgdGhpcy5vblN0YXJ0QnVzeS5lbWl0KCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9faXNBY3RpdmUgPT09IHRydWUgJiYgdmFsID09PSBmYWxzZSAmJiB0aGlzLm9uU3RvcEJ1c3kpIHtcbiAgICAgIHRoaXMuaXNCdXNpZXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLm9uU3RvcEJ1c3kuZW1pdCgpO1xuICAgIH1cbiAgICB0aGlzLl9faXNBY3RpdmUgPSB2YWw7XG4gIH1cbiAgZ2V0IGJ1c3lMaXN0KCkge1xuICAgIHJldHVybiB0aGlzLmJ1c3lRdWV1ZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBsb2FkKG9wdGlvbnM6IFRyYWNrZXJPcHRpb25zKSB7XG4gICAgdGhpcy5sb2FkQnVzeVF1ZXVlKG9wdGlvbnMuYnVzeUxpc3QpO1xuICAgIHRoaXMuc3RhcnRMb2FkaW5nKG9wdGlvbnMpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVBY3RpdmVTdGF0dXMoKSB7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRoaXMuaXNCdXNpZXNQcm9jZXNzaW5nICYmXG4gICAgICAhdGhpcy5pc0RlbGF5UHJvY2Vzc2luZyAmJlxuICAgICAgKHRoaXMuaXNEdXJhdGlvblByb2Nlc3NpbmcgfHwgdGhpcy5idXN5UXVldWUubGVuZ3RoID4gMCk7XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0TG9hZGluZyhvcHRpb25zOiBUcmFja2VyT3B0aW9ucykge1xuICAgIGlmICghdGhpcy5pc0J1c2llc1Byb2Nlc3NpbmcgJiYgdGhpcy5idXN5TGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmlzQnVzaWVzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgICB0aGlzLmlzRGVsYXlQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMudXBkYXRlQWN0aXZlU3RhdHVzKCk7XG4gICAgICB0aW1lcihvcHRpb25zLmRlbGF5KS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmlzRGVsYXlQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNEdXJhdGlvblByb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZVN0YXR1cygpO1xuICAgICAgICB0aW1lcihvcHRpb25zLm1pbkR1cmF0aW9uKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaXNEdXJhdGlvblByb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUFjdGl2ZVN0YXR1cygpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbG9hZEJ1c3lRdWV1ZShidXNpZXM6IEFycmF5PFByb21pc2U8YW55PiB8IFN1YnNjcmlwdGlvbj4pIHtcbiAgICBidXNpZXMuZmlsdGVyKChidXN5KSA9PiB7XG4gICAgICByZXR1cm4gYnVzeSAmJiAhYnVzeS5oYXNPd25Qcm9wZXJ0eSgnX19sb2FkZWRfbWFya19ieV9uZ19idXN5Jyk7XG4gICAgfSkuZm9yRWFjaCgoYnVzeTogUHJvbWlzZTxhbnk+IHwgU3Vic2NyaXB0aW9uKSA9PiB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYnVzeSwgJ19fbG9hZGVkX21hcmtfYnlfbmdfYnVzeScsIHtcbiAgICAgICAgdmFsdWU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgbGV0IGN1cl9idXN5O1xuICAgICAgaWYgKGlzUHJvbWlzZShidXN5KSkge1xuICAgICAgICBjdXJfYnVzeSA9IGZyb20oYnVzeSkuc3Vic2NyaWJlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJfYnVzeSA9IGJ1c3k7XG4gICAgICB9XG4gICAgICB0aGlzLmFwcGVuZFRvUXVldWUoY3VyX2J1c3kpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhcHBlbmRUb1F1ZXVlKGJ1c3k6IFN1YnNjcmlwdGlvbikge1xuICAgIHRoaXMuYnVzeVF1ZXVlLnB1c2goYnVzeSk7XG4gICAgYnVzeS5hZGQoKCkgPT4ge1xuICAgICAgdGhpcy5idXN5UXVldWUgPSB0aGlzLmJ1c3lRdWV1ZS5maWx0ZXIoKGN1cjogU3Vic2NyaXB0aW9uKSA9PiAhY3VyLmNsb3NlZCk7XG4gICAgICB0aGlzLnVwZGF0ZUFjdGl2ZVN0YXR1cygpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gIH1cbn1cbiJdfQ==