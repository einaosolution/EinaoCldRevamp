import { Injectable, Optional, EventEmitter, ChangeDetectorRef, Component, Inject, NgModule, ApplicationRef, ComponentFactoryResolver, Directive, ElementRef, Injector, Input, Output, Renderer2, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';
import { __values } from 'tslib';
import { from, timer, Subscription } from 'rxjs';
import { animate, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var InstanceConfigHolderService = /** @class */ (function () {
    function InstanceConfigHolderService() {
    }
    InstanceConfigHolderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    InstanceConfigHolderService.ctorParameters = function () { return []; };
    /** @nocollapse */ InstanceConfigHolderService.ngInjectableDef = defineInjectable({ factory: function InstanceConfigHolderService_Factory() { return new InstanceConfigHolderService(); }, token: InstanceConfigHolderService, providedIn: "root" });
    return InstanceConfigHolderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BusyConfig = /** @class */ (function () {
    function BusyConfig(config) {
        var e_1, _a;
        if (config === void 0) { config = {}; }
        try {
            for (var _b = __values(Object.keys(BUSY_CONFIG_DEFAULTS)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var option = _c.value;
                this[option] = config[option] !== undefined ? config[option] : BUSY_CONFIG_DEFAULTS[option];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return BusyConfig;
}());
var DefaultBusyComponent = /** @class */ (function () {
    function DefaultBusyComponent(instanceConfigHolder) {
        this.instanceConfigHolder = instanceConfigHolder;
    }
    Object.defineProperty(DefaultBusyComponent.prototype, "message", {
        get: /**
         * @return {?}
         */
        function () {
            return this.instanceConfigHolder.config.message;
        },
        enumerable: true,
        configurable: true
    });
    DefaultBusyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'default-busy',
                    template: "\n      <div class=\"ng-busy-default-wrapper\">\n          <div class=\"ng-busy-default-sign\">\n              <div class=\"ng-busy-default-spinner\">\n                  <div class=\"bar1\"></div>\n                  <div class=\"bar2\"></div>\n                  <div class=\"bar3\"></div>\n                  <div class=\"bar4\"></div>\n                  <div class=\"bar5\"></div>\n                  <div class=\"bar6\"></div>\n                  <div class=\"bar7\"></div>\n                  <div class=\"bar8\"></div>\n                  <div class=\"bar9\"></div>\n                  <div class=\"bar10\"></div>\n                  <div class=\"bar11\"></div>\n                  <div class=\"bar12\"></div>\n              </div>\n              <div class=\"ng-busy-default-text\">{{message}}</div>\n          </div>\n      </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    DefaultBusyComponent.ctorParameters = function () { return [
        { type: InstanceConfigHolderService, decorators: [{ type: Inject, args: ['instanceConfigHolder',] }] }
    ]; };
    return DefaultBusyComponent;
}());
/** @type {?} */
var BUSY_CONFIG_DEFAULTS = {
    template: DefaultBusyComponent,
    templateNgStyle: {},
    delay: 0,
    minDuration: 0,
    backdrop: true,
    message: 'Please wait...',
    wrapperClass: 'ng-busy',
    disableAnimation: false
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function isPromise(value) {
    return value && typeof (/** @type {?} */ (value)).subscribe !== 'function' && typeof (/** @type {?} */ (value)).then === 'function';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BusyTrackerService = /** @class */ (function () {
    function BusyTrackerService() {
        this.isDelayProcessing = false;
        this.isDurationProcessing = false;
        this.isBusiesProcessing = false;
        this.busyQueue = [];
        this.__isActive = false;
        this.onStartBusy = new EventEmitter();
        this.onStopBusy = new EventEmitter();
    }
    Object.defineProperty(BusyTrackerService.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.__isActive;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (this.__isActive === false && val === true && this.onStartBusy) {
                this.onStartBusy.emit();
            }
            if (this.__isActive === true && val === false && this.onStopBusy) {
                this.isBusiesProcessing = false;
                this.onStopBusy.emit();
            }
            this.__isActive = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BusyTrackerService.prototype, "busyList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.busyQueue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} options
     * @return {?}
     */
    BusyTrackerService.prototype.load = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.loadBusyQueue(options.busyList);
        this.startLoading(options);
    };
    /**
     * @return {?}
     */
    BusyTrackerService.prototype.updateActiveStatus = /**
     * @return {?}
     */
    function () {
        this.isActive = this.isBusiesProcessing &&
            !this.isDelayProcessing &&
            (this.isDurationProcessing || this.busyQueue.length > 0);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    BusyTrackerService.prototype.startLoading = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (!this.isBusiesProcessing && this.busyList.length > 0) {
            this.isBusiesProcessing = true;
            this.isDelayProcessing = true;
            this.updateActiveStatus();
            timer(options.delay).subscribe(function () {
                _this.isDelayProcessing = false;
                _this.isDurationProcessing = true;
                _this.updateActiveStatus();
                timer(options.minDuration).subscribe(function () {
                    _this.isDurationProcessing = false;
                    _this.updateActiveStatus();
                });
            });
        }
    };
    /**
     * @param {?} busies
     * @return {?}
     */
    BusyTrackerService.prototype.loadBusyQueue = /**
     * @param {?} busies
     * @return {?}
     */
    function (busies) {
        var _this = this;
        busies.filter(function (busy) {
            return busy && !busy.hasOwnProperty('__loaded_mark_by_ng_busy');
        }).forEach(function (busy) {
            Object.defineProperty(busy, '__loaded_mark_by_ng_busy', {
                value: true, configurable: false, enumerable: false, writable: false
            });
            /** @type {?} */
            var cur_busy;
            if (isPromise(busy)) {
                cur_busy = from(busy).subscribe();
            }
            else {
                cur_busy = busy;
            }
            _this.appendToQueue(cur_busy);
        });
    };
    /**
     * @param {?} busy
     * @return {?}
     */
    BusyTrackerService.prototype.appendToQueue = /**
     * @param {?} busy
     * @return {?}
     */
    function (busy) {
        var _this = this;
        this.busyQueue.push(busy);
        busy.add(function () {
            _this.busyQueue = _this.busyQueue.filter(function (cur) { return !cur.closed; });
            _this.updateActiveStatus();
        });
    };
    /**
     * @return {?}
     */
    BusyTrackerService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    BusyTrackerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    BusyTrackerService.ctorParameters = function () { return []; };
    /** @nocollapse */ BusyTrackerService.ngInjectableDef = defineInjectable({ factory: function BusyTrackerService_Factory() { return new BusyTrackerService(); }, token: BusyTrackerService, providedIn: "root" });
    return BusyTrackerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var BusyConfigHolderService = /** @class */ (function () {
    function BusyConfigHolderService(config) {
        this.config = Object.assign({}, BUSY_CONFIG_DEFAULTS, config || new BusyConfig());
    }
    BusyConfigHolderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    BusyConfigHolderService.ctorParameters = function () { return [
        { type: BusyConfig, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ BusyConfigHolderService.ngInjectableDef = defineInjectable({ factory: function BusyConfigHolderService_Factory() { return new BusyConfigHolderService(inject(BusyConfig, 8)); }, token: BusyConfigHolderService, providedIn: "root" });
    return BusyConfigHolderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var inactiveStyle = style({
    opacity: 0,
    transform: 'translateY(-40px)'
});
/** @type {?} */
var timing = '.3s ease';
var NgBusyComponent = /** @class */ (function () {
    function NgBusyComponent(instanceConfigHolder, busyEmitter, cdr) {
        var _this = this;
        this.instanceConfigHolder = instanceConfigHolder;
        this.busyEmitter = busyEmitter;
        this.cdr = cdr;
        this.disableAnimation = false;
        this.showBackdrop = true;
        this.isActive = false;
        this.busyMonitor = this.busyEmitter.subscribe(function (isActive) {
            /** @type {?} */
            var config = _this.instanceConfigHolder.config;
            _this.isActive = isActive;
            _this.wrapperClass = config.wrapperClass;
            _this.showBackdrop = config.backdrop;
            _this.disableAnimation = config.disableAnimation;
            if (_this.cdr) {
                _this.cdr.markForCheck();
            }
        });
    }
    /**
     * @return {?}
     */
    NgBusyComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.busyMonitor) {
            this.busyMonitor.unsubscribe();
        }
    };
    NgBusyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ng-busy',
                    template: "<div [class]=\"wrapperClass\" @flyInOut [@.disabled]=\"disableAnimation\" *ngIf=\"isActive\">\n  <ng-content></ng-content>\n</div>\n<div class=\"ng-busy-backdrop\" @flyInOut [@.disabled]=\"disableAnimation\" *ngIf=\"showBackdrop && isActive\">\n</div>\n",
                    styles: [""],
                    animations: [
                        trigger('flyInOut', [
                            transition('void => *', [
                                inactiveStyle,
                                animate(timing)
                            ]),
                            transition('* => void', [
                                animate(timing, inactiveStyle)
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    NgBusyComponent.ctorParameters = function () { return [
        { type: InstanceConfigHolderService, decorators: [{ type: Inject, args: ['instanceConfigHolder',] }] },
        { type: EventEmitter, decorators: [{ type: Inject, args: ['busyEmitter',] }] },
        { type: ChangeDetectorRef }
    ]; };
    return NgBusyComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgBusyDirective = /** @class */ (function () {
    function NgBusyDirective(configHolder, instanceConfigHolder, resolver, tracker, appRef, vcr, element, renderer, injector) {
        var _this = this;
        this.configHolder = configHolder;
        this.instanceConfigHolder = instanceConfigHolder;
        this.resolver = resolver;
        this.tracker = tracker;
        this.appRef = appRef;
        this.vcr = vcr;
        this.element = element;
        this.renderer = renderer;
        this.injector = injector;
        this.busyStart = new EventEmitter();
        this.busyStop = new EventEmitter();
        this.isLoading = false;
        this.busyEmitter = new EventEmitter();
        this.onStartSubscription = tracker.onStartBusy.subscribe(function () {
            setTimeout(function () {
                _this.recreateBusyIfNecessary();
                _this.isLoading = true;
                _this.busyEmitter.emit(_this.isLoading);
                _this.busyStart.emit();
            }, 0);
        });
        this.onStopSubscription = tracker.onStopBusy.subscribe(function () {
            _this.isLoading = false;
            _this.busyEmitter.emit(_this.isLoading);
            _this.busyStop.emit();
        });
    }
    Object.defineProperty(NgBusyDirective.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._option;
        },
        set: /**
         * @param {?} op
         * @return {?}
         */
        function (op) {
            this._option = op;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgBusyDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.optionsNorm = this.normalizeOptions(this.options);
        this.instanceConfigHolder.config = this.optionsNorm;
        this.tracker.load({
            busyList: this.optionsNorm.busy,
            delay: this.optionsNorm.delay,
            minDuration: this.optionsNorm.minDuration
        });
    };
    /**
     * @return {?}
     */
    NgBusyDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyComponents();
        this.onStartSubscription.unsubscribe();
        this.onStopSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    NgBusyDirective.prototype.recreateBusyIfNecessary = /**
     * @return {?}
     */
    function () {
        if (!this.busyRef
            || this.template !== this.optionsNorm.template
            || this.templateNgStyle !== this.optionsNorm.templateNgStyle) {
            this.destroyComponents();
            this.template = this.optionsNorm.template;
            this.templateNgStyle = this.optionsNorm.templateNgStyle;
            this.createBusy();
            this.busyEmitter.emit(this.isLoading);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NgBusyDirective.prototype.normalizeOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (!options) {
            options = { busy: [] };
        }
        else if (Array.isArray(options)
            || isPromise(options)
            || options instanceof Subscription) {
            options = { busy: options };
        }
        options = Object.assign({}, this.configHolder.config, options);
        if (!Array.isArray(options.busy)) {
            options.busy = [options.busy];
        }
        return options;
    };
    /**
     * @return {?}
     */
    NgBusyDirective.prototype.destroyComponents = /**
     * @return {?}
     */
    function () {
        if (this.busyRef) {
            this.busyRef.destroy();
        }
        if (this.componentViewRef) {
            this.appRef.detachView(this.componentViewRef);
        }
    };
    /**
     * @return {?}
     */
    NgBusyDirective.prototype.createBusy = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(NgBusyComponent);
        /** @type {?} */
        var injector = Injector.create({
            providers: [
                {
                    provide: 'instanceConfigHolder',
                    useValue: this.instanceConfigHolder
                },
                {
                    provide: 'busyEmitter',
                    useValue: this.busyEmitter
                }
            ], parent: this.injector
        });
        this.template = this.optionsNorm.template;
        this.busyRef = this.vcr.createComponent(factory, 0, injector, this.generateNgContent(injector));
    };
    /**
     * @param {?} injector
     * @return {?}
     */
    NgBusyDirective.prototype.generateNgContent = /**
     * @param {?} injector
     * @return {?}
     */
    function (injector) {
        if (typeof this.template === 'string') {
            /** @type {?} */
            var element = this.renderer.createText(this.template);
            return [[element]];
        }
        if (this.template instanceof TemplateRef) {
            /** @type {?} */
            var context = {};
            /** @type {?} */
            var viewRef = this.template.createEmbeddedView(context);
            return [viewRef.rootNodes];
        }
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(this.template);
        /** @type {?} */
        var componentRef = factory.create(injector);
        componentRef.instance.templateNgStyle = this.options.templateNgStyle;
        this.componentViewRef = componentRef.hostView;
        this.appRef.attachView(this.componentViewRef);
        return [[componentRef.location.nativeElement]];
    };
    NgBusyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngBusy]',
                    providers: [BusyTrackerService, InstanceConfigHolderService]
                },] },
    ];
    /** @nocollapse */
    NgBusyDirective.ctorParameters = function () { return [
        { type: BusyConfigHolderService },
        { type: InstanceConfigHolderService },
        { type: ComponentFactoryResolver },
        { type: BusyTrackerService },
        { type: ApplicationRef },
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    NgBusyDirective.propDecorators = {
        options: [{ type: Input, args: ['ngBusy',] }],
        busyStart: [{ type: Output }],
        busyStop: [{ type: Output }]
    };
    return NgBusyDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgBusyModule = /** @class */ (function () {
    function NgBusyModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgBusyModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgBusyModule,
            providers: [
                { provide: BusyConfig, useValue: config }
            ]
        };
    };
    NgBusyModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [DefaultBusyComponent, NgBusyDirective, NgBusyComponent],
                    providers: [BusyConfigHolderService, BusyTrackerService],
                    exports: [NgBusyDirective],
                    entryComponents: [DefaultBusyComponent, NgBusyComponent]
                },] },
    ];
    return NgBusyModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgBusyDirective, InstanceConfigHolderService, NgBusyModule, BusyConfig, DefaultBusyComponent, BUSY_CONFIG_DEFAULTS, NgBusyComponent as ɵc, BusyConfigHolderService as ɵb, BusyTrackerService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,